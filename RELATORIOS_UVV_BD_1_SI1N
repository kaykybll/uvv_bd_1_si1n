/*como meu codigo não estava funcionadno 100 % antes, não conseguia inserir valores em algumas tabelas, ai tive que fazer algumas mudanças 
    para conseguir gerar os relatorios, pois antes com as tabelas incompleto logo eu não conseguia gerar os relatorios com as tabelas incompletas
    os relatorios iriam ficar incompleto */

-- criando a database.
create database uvv;

-- usando a database criada.
use uvv;

-- criando a tabela dos funcionarios, com informaçoes do funcionario.
CREATE TABLE funcionario (
  cpf CHAR(11) NOT NULL                 COMMENT "cpf do funcionário ela quem será a chave primaria da tabela.",
  primeiro_nome VARCHAR(15) NOT NULL    COMMENT "Primeiro nome do funcionário.",
  nome_meio CHAR(1)                     COMMENT " primeira letra do nome do meio do funcionario.",
  ultimo_nome VARCHAR(15) NOT NULL      COMMENT "Sobrenome do funcionário.",
  data_nascimento DATE                  COMMENT "data de nascimento do funcionario.", 
  endereco VARCHAR(30)                  COMMENT "Endereço do funcionário.",
  sexo CHAR(1)                          COMMENT "Sexo do funcionário.",
  salario DECIMAL(10,2)                 COMMENT "salário do funcionário.",
  cpf_supervisor CHAR(11) NOT NULL      COMMENT " será uma chave estrangeira da mesma tabela.",
  numero_departamento INT NOT NULL      COMMENT "Número do departamento do funcionário.",
  PRIMARY KEY (cpf)
);

-- criando a tabela de dependente, onde vai ser informado os dados do dependente.
CREATE TABLE dependente (
 cpf_funcionario CHAR(11) NOT NULL              COMMENT "cpf do funcionário, é uma chave primaria dessa tabela e é uma chave estrangeira que vem da tabela funcionário.",
 nome_dependente VARCHAR(15) NOT NULL           COMMENT "nome do dependente, é também uma chave primaria.",
 sexo CHAR(1)                                   COMMENT "sexo do dependente.",
 data_nascimento DATE                           COMMENT "data de nascimento do dependente.",
 parentesco VARCHAR(15)                         COMMENT "grau do parentesco do dependente com a tabela funcionário.",
 PRIMARY KEY (cpf_funcionario, nome_dependente)
);

-- criando a tabela de departamento, Tabela que armazena as informaçoẽs dos departamentos
CREATE TABLE departamento (
 numero_departamento INT NOT NULL          COMMENT "número do departamento, essa é a chave primaria da tabela.",
 nome_departamento VARCHAR(15) NOT NULL    COMMENT "nome do departamento.",
 cpf_gerente CHAR(11) NOT NULL             COMMENT "cpf do gerente do departamento.essa é uma chave estrangeira da tabela funcionario.",
 data_inicio_gerente DATE                  COMMENT "data inico que o gerente entrou no departamento.",
 PRIMARY KEY (numero_departamento)
);

-- criando a tabela de projeto, que armazena informações dos projetos. 
CREATE TABLE projeto (
 numero_projeto INT NOT NULL         COMMENT "número do projeto, é uma chave primaria dessa tabela.",
 nome_projeto VARCHAR(15) NOT NULL   COMMENT "nome do projeto, deve ser unico",
 local_projeto VARCHAR(15)           COMMENT "local do projeto.",
 numero_departamento INT NOT NULL    COMMENT "número do departamento.é uma chave estrangeira da tabela departamento." ,
 PRIMARY KEY (numero_projeto)
);

-- Criando a tabela de trabalha_em, tabela onde são informadas onde cada funcionario trabalha em cada projeto. 
CREATE TABLE trabalha_em (
 cpf_funcionario CHAR(11) NOT NULL             COMMENT "cpf do funcionário, é uma chave primaria desta tabela e é uma chave estrangeira da tabela funcionário.",
 numero_projeto INT NOT NULL                   COMMENT "Número do projeto, é uma chave primaria desta tabela e é uma chave estrangeira da tabela projeto.",
 horas DECIMAL(3,1) NOT NULL                   COMMENT "horas trabalhadas pelo funcionário.",
 PRIMARY KEY (cpf_funcionario, numero_projeto)
);

-- criando a tabela de localizacoes_departamento.
CREATE TABLE localizacoes_departamento (
numero_departamento INT NOT NULL             COMMENT "número do departamento, é uma chave primaria também é uma chave estrangeira da tabela departamento.",
local VARCHAR(15) NOT NULL                   COMMENT "local do departamento, é uma chave primaria da tabela.",
PRIMARY KEY (numero_departamento, local)
);

-- criando a AK referente a tabela de departamentos
CREATE UNIQUE INDEX departamento_idx
 ON departamento
 ( nome_departamento );

-- criando a AK referente a tabela de projetos
CREATE UNIQUE INDEX projeto_idx
 ON projeto
 ( nome_projeto );

-- CRIANDO AS CHAVES ESTRANGEIRAS DAS TABELAS 
ALTER TABLE departamento
 ADD FOREIGN KEY (cpf_gerente)
 REFERENCES funcionario (cpf);

ALTER TABLE funcionario
 ADD FOREIGN KEY (cpf_supervisor)
 REFERENCES funcionario (cpf);

ALTER TABLE dependente
 ADD FOREIGN KEY (cpf_funcionario)
 REFERENCES funcionario (cpf);

ALTER TABLE trabalha_em
 ADD FOREIGN KEY (cpf_funcionario)
 REFERENCES funcionario (cpf);
 
ALTER TABLE localizacoes_departamento
 ADD FOREIGN KEY (numero_departamento)
 REFERENCES departamento (numero_departamento);

ALTER TABLE projeto
 ADD FOREIGN KEY (numero_departamento)
 REFERENCES departamento (numero_departamento);

ALTER TABLE trabalha_em
 ADD FOREIGN KEY (numero_projeto)
 REFERENCES projeto (numero_projeto);
 
 -- inserindo informações do funcionario
 INSERT INTO
 funcionario (cpf, primeiro_nome, nome_meio, ultimo_nome, data_nascimento, endereco, sexo, salario, cpf_supervisor, numero_departamento)
 VALUES
	("88866555576", "Jorge", "E", "Brito", "1937-11-10", "RuaDoHorto,35,São Paulo,SP", "M", 55000.00, "88866555576", 1),
    ("33344555587", "Fernando", "T", "Wong", "1955-12-08", "RuaDaLapa,34,São Paulo,SP", "M", 40000.00, "88866555576", 5),
    ("98765432168", "Jennifer", "S", "Souza", "1941-06-20", "Av.ArthurDeLima,54,Santo André", "F", 43000.00, "88866555576", 4),
    ("99988777767", "Alice", "J", "Zelaya", "1968-01-19", "RuaSouzaLima,35,Curitiba,PR", "F", 25000.00, "98765432168", 4),
    ("98798798733", "André", "V", "Pereira", "1969-03-29", "RuaTimbira,35,São Paulo,SP", "M", 25000.00, "98765432168", 4),
    ("12345678966", "João", "B", "Silva", "1965-01-09", "RuaDasFlores,751,São Paulo,SP", "M", 30000.00, "33344555587", 5),
    ("66688444476", "Ronaldo", "K", "Lima", "1962-09-15", "RuaRebouças,65,Piracicaba,SP", "M", 38000.00, "33344555587", 5),
    ("45345345376", "Joice", "A", "Leite", "1972-07-31", "Av.LucasOber,74,São Paulo,SP", "F", 25000.00, "33344555587", 5);

-- inserindo dados da tabela departamento
INSERT INTO
 departamento (numero_departamento, nome_departamento, cpf_gerente, data_inicio_gerente)
 VALUES
	(5, "Pesquisa", "33344555587", "1988-05-22"),
	(4, "Administração", "98765432168", "1995-01-01"),
	(1, "Matriz", "88866555576", "1981-06-19");

-- inserindo dados da tabela localizacoes_departamento
INSERT INTO
 localizacoes_departamento (numero_departamento, local)
 VALUES 
	(1, "São Paulo"),
    (4, "Mauá"),
    (5, "Santo André"),
    (5, "Itu"),
    (5, "São Paulo");

-- inserindo dados da tabela projeto 
INSERT INTO
 projeto (numero_projeto, nome_projeto, local_projeto, numero_departamento)
 VALUES 
	(1, "ProdutoX", "Santo André", 5),
    (2, "ProdutoY", "Itu", 5),
    (3, "ProdutoZ", "São Paulo", 5),
    (10, "Informatização", "Mauá", 4),
    (20, "Reorganização", "São Paulo", 1),
    (30, "Novosbenefícios", "Mauá", 4);

-- inserindo dados da tabela dependente 
INSERT INTO
 dependente (cpf_funcionario, nome_dependente, sexo, data_nascimento, parentesco)
 VALUES
	("33344555587", "Alicia", "F", "1986-04-05", "Filha"),
    ("33344555587", "Tiago", "M", "1983-10-25", "Filho"),
    ("33344555587", "Janaína", "F", "1958-05-03", "Esposa"),
    ("98765432168", "Antonio", "M", "1942-02-28", "Marido"),
    ("12345678966", "Michael", "M", "1988-01-04", "Filho"),
    ("12345678966", "Alicia", "F", "1988-12-30", "Filha"),
    ("12345678966", "Elizabeth", "F", "1967-05-05", "Esposa");

-- inserindo dados da tabela trabalha_em 
INSERT INTO
 trabalha_em (cpf_funcionario, numero_projeto, horas)
 VALUES
	("12345678966", 1, 32.5),
    ("12345678966", 2, 7.5),
    ("66688444476", 3, 40.0),
    ("45345345376", 1, 20.0),
    ("45345345376", 2, 20.0),
    ("33344555587", 2, 10.0),
    ("33344555587", 3, 10.0),
    ("33344555587", 10, 10.0),
    ("33344555587", 20, 10.0),
    ("99988777767", 30, 30.0),
    ("99988777767", 10, 10.0),
    ("98798798733", 10, 35.0),
    ("98798798733", 30, 5.0),
    ("98765432168", 30, 20.0),
    ("98765432168", 20, 15.0),
    ("88866555576", 20, 0);
    
    
    /*como meu codigo não estava funcionadno 100 % antes, não conseguia inserir valores em algumas tabelas, ai tive que fazer algumas mudanças 
    para conseguir gerar os relatorios, pois antes com as tabelas incompleto logo eu não conseguia gerar os relatorios com as tabelas incompletas
    os relatorios iriam ficar incompleto */
    
 
	-- Questão 1
 select AVG(salario) as mediaSalarial, nome_departamento as departamento
    from funcionario as f
    inner join departamento as d on (f.numero_departamento = d.numero_departamento)
    group by nome_departamento;






-- Questão 2
select AVG(salario) as mediaSalarial, sexo
    from funcionario
    group by sexo;






-- Questão 3
select CONCAT(f.primeiro_nome, ' ', f.nome_meio, ' ', f.ultimo_nome) as nome_completo, f.data_nascimento, curdate() as dataAtual, 
    timestampdiff(year, data_nascimento, curdate()) as idade, 
    f.salario, d.nome_departamento
    from funcionario as f
    inner join departamento as d on (f.numero_departamento = d.numero_departamento);






-- Questão 4
select CONCAT(f.primeiro_nome, ' ', f.nome_meio, ' ', f.ultimo_nome) as nome_completo, f.data_nascimento, curdate() as dataAtual, 
    timestampdiff(year, data_nascimento, curdate()) as idade, f.salario as salario_atual, case
    when f.salario < 35.000 then f.salario + (f.salario * 0.2)
    when f.salario >= 35.000 then f.salario + (f.salario * 0.15)
    end as novo_salario
    from funcionario as f;





-- Questão 5
select d.nome_departamento, case 
    when d.cpf_gerente = 33344555587 then "Fernando"
    when d.cpf_gerente = 88866555576 then "Jorge"
    when d.cpf_gerente = 98765432168 then "Jennifer"
    end as nome_gerente,
    CONCAT(f.primeiro_nome, ' ', f.nome_meio, ' ', f.ultimo_nome) as nome_completo, f.salario as salario_func
    from funcionario as f
    inner join departamento as d on (f.numero_departamento = d.numero_departamento)
    order by d.nome_departamento asc, f.salario desc;






-- Questão 6
select CONCAT(f.primeiro_nome, ' ', f.nome_meio, ' ', f.ultimo_nome) as nome_completo, dp.nome_departamento, d.nome_dependente, 
    d.parentesco, d.data_nascimento, curdate() as dataAtual, timestampdiff(year, d.data_nascimento, curdate()) as idade_dependente, case
    when d.sexo = "M" then "Masculino"
    when d.sexo = "F" then "Feminino"
    end as sexo
    from funcionario as f
    inner join departamento as dp on (f.numero_departamento = dp.numero_departamento)
    inner join dependente as d on (f.cpf = d.cpf_funcionario);





-- Questão 7
select CONCAT(f.primeiro_nome, ' ', f.nome_meio, ' ', f.ultimo_nome) as nome_completo, salario, numero_departamento
    from funcionario as f
    where not exists (
    select *
    from dependente
    where cpf = cpf_funcionario);





-- Questão 8
 select d.nome_departamento, p.nome_projeto, CONCAT(f.primeiro_nome, ' ', f.nome_meio, ' ', f.ultimo_nome) as nome_completo, t.horas
    from funcionario as f
    inner join departamento as d on (f.numero_departamento = d.numero_departamento)
    inner join trabalha_em as t on (f.cpf = t.cpf_funcionario)
    inner join projeto as p on (p.numero_projeto = t.numero_projeto)
    where f.cpf = t.cpf_funcionario
    group by nome_projeto, nome_completo, horas
    order by nome_projeto;




-- Questão 9
select d.nome_departamento, p.nome_projeto, SUM(t.horas) as horas
    from departamento as d
    inner join projeto as p on (p.numero_departamento = d.numero_departamento)
    inner join trabalha_em as t on (p.numero_projeto = t.numero_projeto)
    group by nome_departamento, nome_projeto;





-- Questão 10
 select AVG(salario) as mediaSalarial, nome_departamento as departamento
    from funcionario as f
    inner join departamento as d on (f.numero_departamento = d.numero_departamento)
    group by nome_departamento;






-- Questão 11
select CONCAT(f.primeiro_nome, ' ', f.nome_meio, ' ', f.ultimo_nome) as nome_completo, p.nome_projeto, t.horas * 50 as valorRecebido
    from funcionario as f
    inner join departamento as d on (f.numero_departamento = d.numero_departamento)
    inner join trabalha_em as t on (f.cpf = t.cpf_funcionario)
    inner join projeto as p on (p.numero_projeto = t.numero_projeto)
    where f.cpf = t.cpf_funcionario
    group by nome_completo, nome_projeto
    order by nome_projeto;





-- Questão 12
select CONCAT(f.primeiro_nome, ' ', f.nome_meio, ' ', f.ultimo_nome) as nome_completo, d.nome_departamento, p.nome_projeto, t.horas
    from funcionario as f
    inner join departamento as d on (f.numero_departamento = d.numero_departamento)
    inner join projeto as p on (p.numero_departamento = d.numero_departamento)
    inner join trabalha_em as t on (f.cpf = t.cpf_funcionario)
    where t.horas is null or t.horas = 0;





-- Questão 13
select CONCAT(f.primeiro_nome, ' ', f.nome_meio, ' ', f.ultimo_nome) as nome_completo_func, CONCAT(d.nome_dependente, ' ', f.ultimo_nome) as nome_completo_dep, 
    f.sexo as sexo_func, d.sexo as sexo_dep, curdate() as dataAtual, timestampdiff(year, f.data_nascimento, curdate()) as idade_func, 
    timestampdiff(year, d.data_nascimento, curdate()) as idade_dep
    from funcionario as f
    left outer join dependente as d on (f.cpf = d.cpf_funcionario)
    group by nome_completo_func, nome_completo_dep
    order by idade_func desc, idade_func desc;





-- Questão 14
select d.nome_departamento, COUNT(*) as total_funcionarios
    from funcionario as f
    inner join departamento as d on (f.numero_departamento = d.numero_departamento)
    group by nome_departamento;




-- Questão 15
select CONCAT(f.primeiro_nome, ' ', f.nome_meio, ' ', f.ultimo_nome) as nome_completo, d.nome_departamento, p.nome_projeto
    from funcionario as f
    inner join departamento as d on (f.numero_departamento = d.numero_departamento)
    inner join trabalha_em as t on (f.cpf = t.cpf_funcionario)
    inner join projeto as p on (p.numero_projeto = t.numero_projeto)
    where f.cpf = t.cpf_funcionario
    group by nome_completo, nome_projeto
    order by nome_projeto;
    
    
    
    
